plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.ceos'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

//ext {
//    set('springCloudVersion', "2023.0.3")
//}
//
//dependencyManagement {
//    imports {
//        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
//    }
//}


dependencies {
    // Spring Boot Data JPA for database access
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Spring Boot Web for creating web applications
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.jetbrains:annotations:24.0.0'

    // MySQL Connector/J for connecting to MySQL databases
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Spring Boot Starter Test for testing Spring Boot applications
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // JUnit Platform Launcher for launching JUnit-based tests
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Spring Security for securing Spring applications
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    //spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    //aws s3
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'

    //Oath2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //spring health check
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"



    // Jakarta
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    //CSV Reader
    implementation 'com.opencsv:opencsv:5.7.1'

}

test {
    useJUnitPlatform()
}
// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}



